/* exported utility */

window.COPO = window.COPO || {};

COPO.utility = {
  deselect() {
    if (window.getSelection) {
      if (window.getSelection().empty) {  // Chrome
        window.getSelection().empty();
      } else if (window.getSelection().removeAllRanges) {  // Firefox
        window.getSelection().removeAllRanges();
      }
    } else if (document.selection) {  // IE?
      document.selection.empty();
    }
  },

  mobileCheck() {
    var check = false;
    (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
    return check;
  },

  currentPage(controller, action) {
    return $(`.c-${controller}.a-${action}`).length === 1
  },

  urlParam(name) {
    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
    if (!results) return null;
    return results[1] || 0;
  },

  ujsLink(verb, text, path) {
    var output =  $('<a data-remote="true" rel="nofollow" data-method="' + verb +'" href="' + path +'">' + text +'</a>')
    return output
  },

  checkinPath(checkin) {
    if (window.location.pathname.includes("checkins")){
      return window.location.pathname + "/" + checkin.id
    } else {
      return window.location.pathname + '/checkins/' + checkin.id
    }
  },

  idLink(checkin) {
    var path = COPO.utility.checkinPath(checkin)
    var text = `ID: ${checkin.id}`
    var output =  $('<a class="tooltipped black-text" data-tooltip="Click to generate map for this check-in" href="' + path +'">' + text +'</a>')
    return output.prop('outerHTML')
  },

  deviceLink(checkin, devices) {
    if (!devices) return null;
    var path = window.location.pathname.slice(0, -8) + "/devices/" + checkin.device_id
    var name = _.find(devices, _.matchesProperty('id', checkin.device_id)).name
    var output =  $(`<a class="device-link tooltipped" href="${path}" data-tooltip="View check-ins for this device"><i class="material-icons">devices_other</i>${name}</a>`)
    return output.prop('outerHTML')
  },

  deleteCheckinLink(checkin) {
    return COPO.utility.ujsLink('delete',
      '<i class="material-icons tooltipped right red-text" data-tooltip="Delete check-in">delete_forever</i>' ,
      COPO.utility.checkinPath(checkin) )
      .attr('class', 'right').attr('data-confirm', 'Are you sure?').prop('outerHTML')
  },

  fogCheckinLink(checkin, foggedClass, fogId) {
    return COPO.utility.ujsLink('put',
      '<i class="material-icons tooltipped" data-tooltip="Toggle fogging for this check-in">cloud</i>' ,
      COPO.utility.checkinPath(checkin) )
      .attr('id', fogId + checkin.id).attr('class', foggedClass).prop('outerHTML')
  },

  revertLink(checkin) {
    const url = COPO.utility.checkinPath(checkin)
    return `<a data-remote="true" rel="nofollow" class="red-text right tooltipped revert" data-type="${checkin.type}" data-url="${url}" data-original="${checkin.original}" data-tooltip="Click to undo changes">
              undo
            </a>`;
  },

  renderInlineCoords(checkin) {
    const url = COPO.utility.checkinPath(checkin)
    return `<span class="editable-wrapper tooltipped clickable" data-tooltip="Click to edit coordinates">
              <span class="editable" data-url="${url}">${checkin.lat.toFixed(6)}, ${checkin.lng.toFixed(6)}</span>
              <i class="material-icons grey-text edit-coords">mode_edit</i>
            </span>`;
  },

  renderInlineDate(checkin, tempData) {
    const url = COPO.utility.checkinPath(checkin)
    return `<span class="editable-wrapper tooltipped clickable" data-field="datetime" data-tooltip="Click to edit date and time">
              <span id="lt${checkin.id}" class="editable date" data-url="${url}" data-date="${checkin.created_at}">${tempData.created_at}</span>
              <i class="material-icons grey-text edit-coords">mode_edit</i>
            </span>`;
  },

  geocodeCheckinLink(checkin) {
    return COPO.utility.ujsLink('get',
      'Get address' ,
      window.location.pathname + '/checkins/' + checkin.id )
      .prop('outerHTML')
  },

  createCheckinLink(coords) {
    var checkin = {
      'checkin[lat]': coords.lat.toFixed(6),
      'checkin[lng]': coords.lng.toFixed(6)
    }
    var checkinPath = location.pathname + '/checkins?' + $.param(checkin);
    return COPO.utility.ujsLink('post', 'Create checkin here', checkinPath).prop('outerHTML');
  },

  friendsName(friend) {
    return friend.username ? friend.username : friend.email.split('@')[0]
  },

  fadeUp(target) {
    $(target).velocity({
      opacity: 0,
      marginTop: '-40px'
    }, {
      duration: 375,
      easing: 'easeOutExpo',
      queue: false,
      complete() {
        $(target).remove();
      }
    });
  },

  avatar(avatar, options) {
    options = $.extend(this.avatarDefaults, options)
    options["transformation"][0] = "60x60cAvatar"
    if(avatar) {
      return $.cloudinary.image(avatar.public_id, options).prop('outerHTML')
    }
  },

  avatarUrl(avatar, options) {
    options = $.extend(this.avatarDefaults, options)
    if(avatar) {
      return $.cloudinary.url(avatar.public_id, options)
    }
  },

  avatarDefaults: <%= Rails.application.config_for(:cloudinary)['custom_transforms']['avatar'].to_json %>,

  initClipboard() {
    let clipboard = new Clipboard('.clip_button');

    clipboard.on('success', function(e) {
      $('.material-tooltip').children('span').text('Copied');
      e.clearSelection();
    });

    clipboard.on('error', function(e) {
      let  action = e.action;
      let  actionMsg = '';
      let  actionKey = (action === 'cut' ? 'X' : 'C');
      if (/iPhone|iPad/i.test(navigator.userAgent)) {
        actionMsg = 'Touch the copy button above the keyboard';
      } else if (/Mac/i.test(navigator.userAgent)) {
        actionMsg = 'Press âŒ˜-' + actionKey + ' to ' + action;
      } else {
        actionMsg = 'Press Ctrl-' + actionKey + ' to ' + action;
      }
      $('.material-tooltip').children('span').text(actionMsg);
      // console.error('Action:', e.action);
      // console.error('Trigger:', e.trigger);
    });
  },

  gonFix() {
    var contents = $('#gonvariables').html();
    $('#gonvariables').html(contents);
  },

  commaToNewline(string) {
    return string.replace(/, /g, '\n')
  },

  geoLocationError(err) {
    Materialize.toast('Could not get location', 3000)
  },

  pluralize(noun, count) {
    if(count > 1) return noun + 's';
    return noun;
  },

  scrollTo(selector, speed) {
    speed = speed || 200;
    $('html, body').animate({
      scrollTop: $(selector).offset().top
    }, speed);
  },

  padStr(char, length, str) {
    // leftpads str using char until it is at least length
    const diff = parseInt(length) - String(str).length;
    return diff > 0 ? String(char).repeat(diff) + str : str;
  },

  validateLatLng(coord) {
    return Math.abs(coord) < 180;
  },

  substringMatcher(strs) {
    return (query, callback) => {
      let substrRegex = new RegExp(query, 'i');
      let matches = strs.filter(str => substrRegex.test(str));
      callback(matches);
    };
  },

  setActivePage(page) {
    $("a#" + page + "-nav").addClass("current")
  }
};
